{"version":3,"sources":["../../../src/server/users/user.service.js"],"names":["jwt","require","bcrypt","db","User","secret","treeService","algoService","date","module","exports","authenticate","getAll","getById","create","update","delete","_delete","pseudo","password","status","user","findOne","compareSync","hash","token","sign","sub","id","console","log","updateConnectionDate","_id","save","toJSON","find","findById","userParam","hashSync","dateConnect","Date","findIdPlayer","findUserId","newPlayerTreesGenerator","newPlayerMoney","playerPseudo","err","Object","assign","findByIdAndRemove"],"mappings":"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","sourcesContent":["ï»¿/* eslint-disable no-unused-vars */\n/* eslint-disable no-unreachable */\n/* eslint-disable no-console */\n/* eslint-disable no-undef */\n/* eslint-disable no-use-before-define */\n/* eslint-disable consistent-return */\n/* eslint-disable no-extra-parens */\n/* eslint-disable require-atomic-updates */\n/* eslint-disable no-sync */\n/* eslint-disable no-throw-literal */\n/* eslint-disable no-return-await */\n//const config = require(\"config.json\");\nconst jwt = require(\"jsonwebtoken\");\nconst bcrypt = require(\"bcryptjs\");\nconst db = require(\"../_helpers/db\");\nconst User = db.User;\nconst secret =\n    \"THIS IS USED TO SIGN AND VERIFY JWT TOKENS, REPLACE IT WITH YOUR OWN SECRET, IT CAN BE ANY STRING\";\n\nconst treeService = require(\"../trees/trees.service\");\nconst algoService = require(\"../algo/algo.service\");\nimport date from \"date-and-time\";\n\nmodule.exports = {\n    authenticate,\n    getAll,\n    getById,\n    create,\n    update,\n    delete: _delete,\n};\n\n// GreatToto\nasync function authenticate({pseudo, password}) {\n    let status = false; //status connexion\n    const user = await User.findOne({pseudo});\n    if (user && bcrypt.compareSync(password, user.hash)) {\n        const token = jwt.sign({sub: user.id}, secret);\n        console.log(user);\n        status = true;\n        user.status = status; //change status true\n\n        await algoService.updateConnectionDate(user._id);\n        await user.save(); //save change\n\n        return {\n            ...user.toJSON(),\n            token,\n        };\n    }\n}\n\nasync function getAll() {\n    return await User.find();\n}\n\nasync function getById(id) {\n    return await User.findById(id);\n}\nasync function create(userParam) {\n    // validate\n    if (await User.findOne({pseudo: userParam.pseudo})) {\n        throw `pseudo \"${userParam.pseudo}\" is already taken`;\n    }\n    const user = new User(userParam);\n    // hash password\n    if (userParam.password) {\n        user.hash = bcrypt.hashSync(userParam.password, 10);\n    }\n    user.dateConnect = Date();\n\n    await user.save();\n    const findIdPlayer = await findUserId(user.pseudo);\n    await treeService.newPlayerTreesGenerator(findIdPlayer);\n    await algoService.newPlayerMoney(findIdPlayer);\n    // donner l'argent\n}\n\nasync function findUserId(playerPseudo) {\n    const user = await User.findOne({pseudo: playerPseudo}, (err) => {\n        if (err) {\n            console.log(err);\n            return null;\n        }\n    });\n    return user;\n}\n\nasync function update(id, userParam) {\n    const user = await User.findById(id);\n\n    // validate\n    if (!user) {\n        throw \"User not found\";\n    }\n    if (\n        user.pseudo !== userParam.pseudo &&\n        (await User.findOne({pseudo: userParam.pseudo}))\n    ) {\n        throw `pseudo \"${userParam.pseudo}\" is already taken`;\n    }\n\n    // hash password if it was entered\n    if (userParam.password) {\n        userParam.hash = bcrypt.hashSync(userParam.password, 10);\n    }\n\n    // copy userParam properties to user\n    Object.assign(user, userParam);\n\n    await user.save();\n}\n\nasync function _delete(id) {\n    await User.findByIdAndRemove(id);\n}\n"],"file":"user.service.js"}