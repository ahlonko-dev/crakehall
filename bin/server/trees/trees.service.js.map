{"version":3,"sources":["../../../src/server/trees/trees.service.js"],"names":["db","require","Trees","User","newUserFunction","otherPlayerPrice","userService","lockFreeTreeAlgo","getAllTrees","req","res","trees","find","json","error","send","response","data","message","getIdPlayer","idPlayer","params","playerTrees","player_id","getidplayer","newPlayerTreesGenerator","console","log","_id","pseudoPlayer","pseudo","colorPlayer","color","freeTrees","free","buyOtherPlayerTree","body","treeId","playerId","treeInfo","findById","playerInfo","locked","money","leave","buyATreeNotFree","updateTree","err","doc","player_color","save","updateUser","warn","lockFreeTree","priceForLock","lockTheTree","payThePrice","buyAFreeTree","findTree","treeLeave","user","undefined","buyingTree","module","exports"],"mappings":"AAAA;AACA,MAAMA,EAAE,GAAGC,OAAO,CAAC,gBAAD,CAAlB;;AACA,MAAMC,KAAK,GAAGF,EAAE,CAACE,KAAjB;AACA,MAAMC,IAAI,GAAGH,EAAE,CAACG,IAAhB;;AACA,MAAMC,eAAe,GAAGH,OAAO,CAAC,sBAAD,CAA/B;;AACA,MAAMI,gBAAgB,GAAGJ,OAAO,CAAC,0BAAD,CAAhC;;AACA,MAAMK,WAAW,GAAGL,OAAO,CAAC,uBAAD,CAA3B;;AACA,MAAMM,gBAAgB,GAAGN,OAAO,CAAC,sBAAD,CAAhC,C,CAEA;AAEA;;;AACA,eAAeO,WAAf,CAA2BC,GAA3B,EAAgCC,GAAhC,EAAqC;AACjC,MAAI;AACA,UAAMC,KAAK,GAAG,MAAMT,KAAK,CAACU,IAAN,EAApB,CADA,CAEA;;AACAF,IAAAA,GAAG,CAACG,IAAJ,CAASF,KAAT;AACH,GAJD,CAIE,OAAOG,KAAP,EAAc;AACZJ,IAAAA,GAAG,CAACK,IAAJ,CAASD,KAAK,CAACE,QAAN,CAAeC,IAAf,CAAoBC,OAA7B;AACH;AACJ;AACD;;;;AAKA;;;AACA,eAAeC,WAAf,CAA2BV,GAA3B,EAAgCC,GAAhC,EAAqC;AACjC,MAAI;AACA,UAAMU,QAAQ,GAAG,MAAMX,GAAG,CAACY,MAA3B;AAEA,UAAMC,WAAW,GAAG,MAAMpB,KAAK,CAACU,IAAN,CAAW;AAACW,MAAAA,SAAS,EAAEH,QAAQ,CAACI;AAArB,KAAX,CAA1B;AACAd,IAAAA,GAAG,CAACG,IAAJ,CAASS,WAAT;AACH,GALD,CAKE,OAAOR,KAAP,EAAc;AACZJ,IAAAA,GAAG,CAACK,IAAJ,CAASD,KAAT;AACH;AACJ,C,CAED;;;AACA,eAAeW,uBAAf,CAAuChB,GAAvC,EAA4CC,GAA5C,EAAiD;AAC7CgB,EAAAA,OAAO,CAACC,GAAR,CAAY,4CAAZ;AACA,QAAMP,QAAQ,GAAGX,GAAG,CAACmB,GAArB;AACA,QAAMC,YAAY,GAAGpB,GAAG,CAACqB,MAAzB;AACA,QAAMC,WAAW,GAAGtB,GAAG,CAACuB,KAAxB;AACAN,EAAAA,OAAO,CAACC,GAAR,CAAYP,QAAZ,EAAsBS,YAAtB,EAAoCE,WAApC;;AAEA,MAAI;AACA,UAAME,SAAS,GAAG,MAAM/B,KAAK,CAACU,IAAN,CAAW;AAACsB,MAAAA,IAAI,EAAE;AAAP,KAAX,CAAxB;AAEA9B,IAAAA,eAAe,CAACgB,QAAD,EAAWa,SAAX,EAAsBJ,YAAtB,EAAoCE,WAApC,CAAf;AACH,GAJD,CAIE,OAAOjB,KAAP,EAAc;AACZJ,IAAAA,GAAG,CAACK,IAAJ,CAASD,KAAT;AACH;AACJ,C,CAED;;;AACA,eAAeqB,kBAAf,CAAkC1B,GAAlC,EAAuCC,GAAvC,EAA4C;AACxC,MAAI;AACAgB,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYlB,GAAG,CAAC2B,IAAhB;AAEA,UAAMC,MAAM,GAAG5B,GAAG,CAAC2B,IAAJ,CAAS,CAAT,CAAf;AACA,UAAME,QAAQ,GAAG7B,GAAG,CAAC2B,IAAJ,CAAS,CAAT,CAAjB;AAEA,UAAMG,QAAQ,GAAG,MAAMrC,KAAK,CAACsC,QAAN,CAAeH,MAAf,CAAvB;AACA,UAAMI,UAAU,GAAG,MAAMtC,IAAI,CAACqC,QAAL,CAAcF,QAAd,CAAzB,CARA,CASA;AACA;;AACA,QACIC,QAAQ,CAACL,IAAT,IAAiB,KAAjB,IACAK,QAAQ,CAACG,MAAT,IAAmB,KADnB,IAEAD,UAAU,CAACE,KAAX,IAAoBJ,QAAQ,CAACK,KAF7B,IAGAH,UAAU,CAACb,GAAX,IAAkBW,QAAQ,CAAChB,SAJ/B,EAKE;AACEG,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACA,YAAMkB,eAAe,GAAG,MAAMxC,gBAAgB,CAC1CkC,QAD0C,EAE1CE,UAF0C,CAA9C;;AAKA,UAAIA,UAAU,CAACE,KAAX,IAAoBE,eAAxB,EAAyC;AACrC;AAEA,cAAMC,UAAU,GAAG,MAAM5C,KAAK,CAACsC,QAAN,CAAeH,MAAf,EAAuB,UAC5CU,GAD4C,EAE5CC,GAF4C,EAG9C;AACEA,UAAAA,GAAG,CAACd,IAAJ,GAAW,KAAX;AACAc,UAAAA,GAAG,CAACzB,SAAJ,GAAgBe,QAAhB;AACAU,UAAAA,GAAG,CAACC,YAAJ,GAAmBR,UAAU,CAACT,KAA9B;AACAgB,UAAAA,GAAG,CAACE,IAAJ;AACAxB,UAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ;AACAD,UAAAA,OAAO,CAACC,GAAR,CAAYY,QAAZ;AACH,SAVwB,CAAzB;AAYA,cAAMY,UAAU,GAAG,MAAMhD,IAAI,CAACqC,QAAL,CAAcF,QAAd,EAAwB,UAC7CS,GAD6C,EAE7CC,GAF6C,EAG/C;AACEA,UAAAA,GAAG,CAACL,KAAJ,GAAYF,UAAU,CAACE,KAAX,GAAmBE,eAA/B;AAEAG,UAAAA,GAAG,CAACE,IAAJ;AACAxB,UAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;AACAD,UAAAA,OAAO,CAACC,GAAR,CAAYc,UAAZ;AACH,SATwB,CAAzB;AAUH;AACJ,KAtCD,MAsCO;AACHf,MAAAA,OAAO,CAAC0B,IAAR,CAAa,0BAAb;AACH,KAnDD,CAqDA;;AACH,GAtDD,CAsDE,OAAOtC,KAAP,EAAc;AACZJ,IAAAA,GAAG,CAACK,IAAJ,CAASD,KAAT;AACH;AACJ,C,CAED;;;AACA,eAAeuC,YAAf,CAA4B5C,GAA5B,EAAiCC,GAAjC,EAAsC;AAClC,MAAI;AACAgB,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYlB,GAAG,CAAC2B,IAAhB;AAEA,UAAMC,MAAM,GAAG5B,GAAG,CAAC2B,IAAJ,CAAS,CAAT,CAAf;AACA,UAAME,QAAQ,GAAG7B,GAAG,CAAC2B,IAAJ,CAAS,CAAT,CAAjB;AAEA,UAAMK,UAAU,GAAG,MAAMtC,IAAI,CAACS,IAAL,CAAU;AAACgB,MAAAA,GAAG,EAAEU;AAAN,KAAV,CAAzB;AACA,UAAMC,QAAQ,GAAG,MAAMrC,KAAK,CAACU,IAAN,CAAW;AAACgB,MAAAA,GAAG,EAAES;AAAN,KAAX,CAAvB;AAEA,UAAMiB,YAAY,GAAG,MAAM/C,gBAAgB,CAACkC,UAAU,CAAC,CAAD,CAAX,EAAgBF,QAAQ,CAAC,CAAD,CAAxB,CAA3C;AACAb,IAAAA,OAAO,CAACC,GAAR,CAAYc,UAAU,CAAC,CAAD,CAAV,CAAcE,KAA1B;;AACA,QAAIF,UAAU,CAAC,CAAD,CAAV,CAAcE,KAAd,IAAuBW,YAA3B,EAAyC;AACrC,YAAMC,WAAW,GAAG,MAAMrD,KAAK,CAACsC,QAAN,CAAeH,MAAf,EAAuB,UAC7CU,GAD6C,EAE7CC,GAF6C,EAG/C;AACEA,QAAAA,GAAG,CAACN,MAAJ,GAAa,IAAb;AACAM,QAAAA,GAAG,CAACE,IAAJ;AACAxB,QAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAYY,QAAZ;AACH,OARyB,CAA1B,CADqC,CAWrC;;AAEA,YAAMiB,WAAW,GAAG,MAAMrD,IAAI,CAACqC,QAAL,CAAcF,QAAd,EAAwB,UAC9CS,GAD8C,EAE9CC,GAF8C,EAGhD;AACEA,QAAAA,GAAG,CAACL,KAAJ,GAAYK,GAAG,CAACL,KAAJ,GAAYW,YAAxB;AACAN,QAAAA,GAAG,CAACE,IAAJ;AACAxB,QAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAYY,QAAZ;AACH,OARyB,CAA1B;AASH,KAtBD,MAsBO;AACHb,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACH;AACJ,GArCD,CAqCE,OAAOb,KAAP,EAAc;AACZJ,IAAAA,GAAG,CAACK,IAAJ,CAASD,KAAT;AACH;AACJ,C,CAED;;;AACA,eAAe2C,YAAf,CAA4BhD,GAA5B,EAAiCC,GAAjC,EAAsC;AAClC,MAAI;AACAgB,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYlB,GAAG,CAAC2B,IAAhB;AAEA,UAAMC,MAAM,GAAG5B,GAAG,CAAC2B,IAAJ,CAAS,CAAT,CAAf;AACA,UAAME,QAAQ,GAAG7B,GAAG,CAAC2B,IAAJ,CAAS,CAAT,CAAjB;AACA,UAAMsB,QAAQ,GAAG,MAAMxD,KAAK,CAACU,IAAN,CAAW;AAACgB,MAAAA,GAAG,EAAES;AAAN,KAAX,CAAvB;AACA,UAAMsB,SAAS,GAAG,MAAMD,QAAQ,CAAC,CAAD,CAAR,CAAYd,KAApC;AAEA,UAAMgB,IAAI,GAAG,MAAMzD,IAAI,CAACqC,QAAL,CAAcF,QAAd,CAAnB;;AACA,QACIsB,IAAI,CAACjB,KAAL,IAAc,IAAd,IACAiB,IAAI,CAACjB,KAAL,IAAckB,SADd,IAEAD,IAAI,CAACjB,KAAL,IAAcgB,SAFd,IAGAD,QAAQ,CAAC,CAAD,CAAR,CAAYxB,IAAZ,IAAoB,IAHpB,IAIAwB,QAAQ,CAAC,CAAD,CAAR,CAAYhB,MAAZ,IAAsB,KAJtB,IAKAJ,QAAQ,IAAIoB,QAAQ,CAAC,CAAD,CAAR,CAAYnC,SAN5B,EAOE;AACE,YAAMuC,UAAU,GAAG,MAAM5D,KAAK,CAACsC,QAAN,CAAeH,MAAf,EAAuB,UAC5CU,GAD4C,EAE5CC,GAF4C,EAG9C;AACEA,QAAAA,GAAG,CAACzB,SAAJ,GAAgBe,QAAhB;AACAU,QAAAA,GAAG,CAACd,IAAJ,GAAW,KAAX;AACAc,QAAAA,GAAG,CAACC,YAAJ,GAAmBW,IAAI,CAAC5B,KAAxB;AACAgB,QAAAA,GAAG,CAACE,IAAJ;AACAxB,QAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACH,OATwB,CAAzB;AAUA,YAAM6B,WAAW,GAAG,MAAMrD,IAAI,CAACqC,QAAL,CAAcF,QAAd,EAAwB,UAC9CS,GAD8C,EAE9CC,GAF8C,EAGhD;AACEA,QAAAA,GAAG,CAACL,KAAJ,GAAYK,GAAG,CAACL,KAAJ,GAAYgB,SAAxB;AACAX,QAAAA,GAAG,CAACE,IAAJ;AACAxB,QAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACH,OAPyB,CAA1B;AAQH,KA1BD,MA0BO;AACHD,MAAAA,OAAO,CAACC,GAAR,CACI,+DADJ;AAGH;AACJ,GAzCD,CAyCE,OAAOb,KAAP,EAAc;AACZJ,IAAAA,GAAG,CAACK,IAAJ,CAASD,KAAT;AACH;AACJ;;AAEDiD,MAAM,CAACC,OAAP,GAAiB;AACbxD,EAAAA,WADa;AAEbW,EAAAA,WAFa;AAGbM,EAAAA,uBAHa;AAIbU,EAAAA,kBAJa;AAKbsB,EAAAA,YALa;AAMbJ,EAAAA;AANa,CAAjB","sourcesContent":["/* eslint-disable no-console */\nconst db = require(\"../_helpers/db\");\nconst Trees = db.Trees;\nconst User = db.User;\nconst newUserFunction = require(\"../algo/getfreetrees\");\nconst otherPlayerPrice = require(\"../algo/otherplayerprice\");\nconst userService = require(\"../users/user.service\");\nconst lockFreeTreeAlgo = require(\"../algo/lockfreetree\");\n\n//const {createIndexes} = require(\"./trees.model\");\n\n// Récupération de l'ensemble des arbres\nasync function getAllTrees(req, res) {\n    try {\n        const trees = await Trees.find();\n        // console.log(trees);\n        res.json(trees);\n    } catch (error) {\n        res.send(error.response.data.message);\n    }\n}\n/* async function getCurrent(req, res) {\n    const momo = await current.getCurrent();\n    res.json(momo);\n} */\n\n// Recupération de l'id d'un joueur et envois des arbres correspondant\nasync function getIdPlayer(req, res) {\n    try {\n        const idPlayer = await req.params;\n\n        const playerTrees = await Trees.find({player_id: idPlayer.getidplayer});\n        res.json(playerTrees);\n    } catch (error) {\n        res.send(error);\n    }\n}\n\n// Donne les  abres aléatoire à un joueur\nasync function newPlayerTreesGenerator(req, res) {\n    console.log(\"============newPlayerTreesGenerator=======\");\n    const idPlayer = req._id;\n    const pseudoPlayer = req.pseudo;\n    const colorPlayer = req.color;\n    console.log(idPlayer, pseudoPlayer, colorPlayer);\n\n    try {\n        const freeTrees = await Trees.find({free: true});\n\n        newUserFunction(idPlayer, freeTrees, pseudoPlayer, colorPlayer);\n    } catch (error) {\n        res.send(error);\n    }\n}\n\n// Permet d'acheetr un abre non lock appartenant à un autre joueur\nasync function buyOtherPlayerTree(req, res) {\n    try {\n        console.log(\"buyOtherPlayerTree\");\n        console.log(req.body);\n\n        const treeId = req.body[1];\n        const playerId = req.body[0];\n\n        const treeInfo = await Trees.findById(treeId);\n        const playerInfo = await User.findById(playerId);\n        // console.log(treeInfo);\n        // console.log(playerInfo);\n        if (\n            treeInfo.free == false &&\n            treeInfo.locked == false &&\n            playerInfo.money >= treeInfo.leave &&\n            playerInfo._id != treeInfo.player_id\n        ) {\n            console.log(\"tu peux l'acheter\");\n            const buyATreeNotFree = await otherPlayerPrice(\n                treeInfo,\n                playerInfo,\n            );\n\n            if (playerInfo.money >= buyATreeNotFree) {\n                //console.log(buyATreeNotFree);\n\n                const updateTree = await Trees.findById(treeId, function (\n                    err,\n                    doc,\n                ) {\n                    doc.free = false;\n                    doc.player_id = playerId;\n                    doc.player_color = playerInfo.color;\n                    doc.save();\n                    console.log(\"L'abre a changé d'appartencance\");\n                    console.log(treeInfo);\n                });\n\n                const updateUser = await User.findById(playerId, function (\n                    err,\n                    doc,\n                ) {\n                    doc.money = playerInfo.money - buyATreeNotFree;\n\n                    doc.save();\n                    console.log(\"le prix de l'abre a été déduit\");\n                    console.log(playerInfo);\n                });\n            }\n        } else {\n            console.warn(\"tu ne peux pas l'acheter\");\n        }\n\n        //otherPlayerPrice();\n    } catch (error) {\n        res.send(error);\n    }\n}\n\n// Fonction pour lock un arbre\nasync function lockFreeTree(req, res) {\n    try {\n        console.log(\"lock tree\");\n        console.log(req.body);\n\n        const treeId = req.body[1];\n        const playerId = req.body[0];\n\n        const playerInfo = await User.find({_id: playerId});\n        const treeInfo = await Trees.find({_id: treeId});\n\n        const priceForLock = await lockFreeTreeAlgo(playerInfo[0], treeInfo[0]);\n        console.log(playerInfo[0].money);\n        if (playerInfo[0].money >= priceForLock) {\n            const lockTheTree = await Trees.findById(treeId, function (\n                err,\n                doc,\n            ) {\n                doc.locked = true;\n                doc.save();\n                console.log(\"L'abre est lock\");\n                console.log(treeInfo);\n            });\n\n            // diminution de la somme du joueur\n\n            const payThePrice = await User.findById(playerId, function (\n                err,\n                doc,\n            ) {\n                doc.money = doc.money - priceForLock;\n                doc.save();\n                console.log(\"L'abre est lock\");\n                console.log(treeInfo);\n            });\n        } else {\n            console.log(\"Tu n'as pas assez d'argent\");\n        }\n    } catch (error) {\n        res.send(error);\n    }\n}\n\n// Permet d'acheter un abre libre\nasync function buyAFreeTree(req, res) {\n    try {\n        console.log(\"buyAfreeTree\");\n        console.log(req.body);\n\n        const treeId = req.body[1];\n        const playerId = req.body[0];\n        const findTree = await Trees.find({_id: treeId});\n        const treeLeave = await findTree[0].leave;\n\n        const user = await User.findById(playerId);\n        if (\n            user.money != null &&\n            user.money != undefined &&\n            user.money >= treeLeave &&\n            findTree[0].free == true &&\n            findTree[0].locked == false &&\n            playerId != findTree[0].player_id\n        ) {\n            const buyingTree = await Trees.findById(treeId, function (\n                err,\n                doc,\n            ) {\n                doc.player_id = playerId;\n                doc.free = false;\n                doc.player_color = user.color;\n                doc.save();\n                console.log(\"modification de l'abre\");\n            });\n            const payThePrice = await User.findById(playerId, function (\n                err,\n                doc,\n            ) {\n                doc.money = doc.money - treeLeave;\n                doc.save();\n                console.log(\"L'abre est payé\");\n            });\n        } else {\n            console.log(\n                \"Tu n'as pas assez d'argent, vas donc tondre des pelouses !!!!\",\n            );\n        }\n    } catch (error) {\n        res.send(error);\n    }\n}\n\nmodule.exports = {\n    getAllTrees,\n    getIdPlayer,\n    newPlayerTreesGenerator,\n    buyOtherPlayerTree,\n    buyAFreeTree,\n    lockFreeTree,\n};\n"],"file":"trees.service.js"}