{"version":3,"sources":["../../../src/server/algo/lockfreetree.js"],"names":["db","require","doc","Trees","User","insideCircle","array","lockFreeTreeAlgo","playerInfo","treeInfo","treeLeave","leave","treeGeoloc","geoloc","center","lat","lon","radius","treesInRadius","playerInRadius","treesInRadiusLeaves","playerTreesValiueInRadius","_id","player_id","console","log","allTrees","find","forEach","element","inCercleRadius","push","playerInRadiusUnique","reduce","acc","valCourante","indexOf","priceForLock","length","module","exports"],"mappings":"AAAA,MAAMA,EAAE,GAAGC,OAAO,CAAC,gBAAD,CAAlB;;AACA,MAAM;AAACC,EAAAA;AAAD,IAAQD,OAAO,CAAC,UAAD,CAArB;;AACA,MAAME,KAAK,GAAGH,EAAE,CAACG,KAAjB;AACA,MAAMC,IAAI,GAAGJ,EAAE,CAACI,IAAhB;AACA,SAAQC,YAAR,QAA2B,mBAA3B;AACA,SAAQC,KAAR,QAAoB,YAApB;;AAEA,eAAeC,gBAAf,CAAgCC,UAAhC,EAA4CC,QAA5C,EAAsD;AAClD;AACA;AACA,QAAMC,SAAS,GAAGD,QAAQ,CAACE,KAA3B;AACA,QAAMC,UAAU,GAAGH,QAAQ,CAACI,MAA5B;AACA,QAAMC,MAAM,GAAG;AAACC,IAAAA,GAAG,EAAEH,UAAU,CAACG,GAAjB;AAAsBC,IAAAA,GAAG,EAAEJ,UAAU,CAACI;AAAtC,GAAf;AACA,QAAMC,MAAM,GAAG,GAAf;AACA,QAAMC,aAAa,GAAG,EAAtB;AACA,QAAMC,cAAc,GAAG,EAAvB,CARkD,CASlD;;AACA,MAAIC,mBAAmB,GAAG,CAA1B,CAVkD,CAWlD;AACA;;AACA,MAAIC,yBAAyB,GAAG,CAAhC;;AAEA,MAAIb,UAAU,CAACc,GAAX,IAAkBb,QAAQ,CAACc,SAA/B,EAA0C;AACtCC,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACA,UAAMC,QAAQ,GAAG,MAAMvB,KAAK,CAACwB,IAAN,EAAvB;AAEAD,IAAAA,QAAQ,CAACE,OAAT,CAAkBC,OAAD,IAAa;AAC1B,YAAMC,cAAc,GAAGzB,YAAY,CAC/B;AAACU,QAAAA,GAAG,EAAEc,OAAO,CAAChB,MAAR,CAAeE,GAArB;AAA0BC,QAAAA,GAAG,EAAEa,OAAO,CAAChB,MAAR,CAAeG;AAA9C,OAD+B,EAE/BF,MAF+B,EAG/BG,MAH+B,CAAnC;;AAMA,UAAIa,cAAc,KAAK,IAAvB,EAA6B;AACzBZ,QAAAA,aAAa,CAACa,IAAd,CAAmBF,OAAnB;AACAT,QAAAA,mBAAmB,IAAIS,OAAO,CAAClB,KAA/B;;AACA,YAAIkB,OAAO,CAACN,SAAR,IAAqB,IAAzB,EAA+B;AAC3BJ,UAAAA,cAAc,CAACY,IAAf,CAAoBF,OAAO,CAACN,SAA5B;AACAF,UAAAA,yBAAyB,IAAIQ,OAAO,CAAClB,KAArC;AACH;AACJ;AACJ,KAfD,EAJsC,CAoBtC;;AACA,UAAMqB,oBAAoB,GAAGb,cAAc,CAACc,MAAf,CAAsB,UAC/CC,GAD+C,EAE/CC,WAF+C,EAGjD;AACE,UAAID,GAAG,CAACE,OAAJ,CAAYD,WAAZ,MAA6B,CAAC,CAAlC,EAAqC;AACjCD,QAAAA,GAAG,CAACH,IAAJ,CAASI,WAAT;AACH;;AACD,aAAOD,GAAP;AACH,KAR4B,EAS7B,EAT6B,CAA7B,CArBsC,CAgCtC;;AACA,UAAMG,YAAY,GACd3B,SAAS,GAAG,EAAZ,GACAU,mBAAmB,GAAGY,oBAAoB,CAACM,MAD3C,GAEAjB,yBAAyB,GAAGW,oBAAoB,CAACM,MAHrD,CAjCsC,CAqCtC;;AACA,WAAOD,YAAP;AACH,GAvCD,MAuCO;AACHb,IAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ;AACH;AACJ,C,CAED;;;AAEAc,MAAM,CAACC,OAAP,GAAiBjC,gBAAjB","sourcesContent":["const db = require(\"../_helpers/db\");\nconst {doc} = require(\"prettier\");\nconst Trees = db.Trees;\nconst User = db.User;\nimport {insideCircle} from \"geolocation-utils\";\nimport {array} from \"prop-types\";\n\nasync function lockFreeTreeAlgo(playerInfo, treeInfo) {\n    // console.log(playerInfo, treeInfo);\n    // valeur de l'arbre\n    const treeLeave = treeInfo.leave;\n    const treeGeoloc = treeInfo.geoloc;\n    const center = {lat: treeGeoloc.lat, lon: treeGeoloc.lon};\n    const radius = 100;\n    const treesInRadius = [];\n    const playerInRadius = [];\n    // valeur de tous les arbres dans un rayon de 100 m\n    let treesInRadiusLeaves = 0;\n    // nombre de joueurs dans un rayon de 100 m] : playerInRadiusUnique.length\n    // valeur de tous les arbres des joueurs dans un rayon de 100 m\n    let playerTreesValiueInRadius = 0;\n\n    if (playerInfo._id == treeInfo.player_id) {\n        console.log(\"cet abre vous appartient\");\n        const allTrees = await Trees.find();\n\n        allTrees.forEach((element) => {\n            const inCercleRadius = insideCircle(\n                {lat: element.geoloc.lat, lon: element.geoloc.lon},\n                center,\n                radius,\n            );\n\n            if (inCercleRadius === true) {\n                treesInRadius.push(element);\n                treesInRadiusLeaves += element.leave;\n                if (element.player_id != null) {\n                    playerInRadius.push(element.player_id);\n                    playerTreesValiueInRadius += element.leave;\n                }\n            }\n        });\n        // valeur de tous les arbres des joueurs dans un rayon de 100 m\n        const playerInRadiusUnique = playerInRadius.reduce(function (\n            acc,\n            valCourante,\n        ) {\n            if (acc.indexOf(valCourante) === -1) {\n                acc.push(valCourante);\n            }\n            return acc;\n        },\n        []);\n\n        // Total à payer pour lock l'abre\n        const priceForLock =\n            treeLeave * 10 +\n            treesInRadiusLeaves * playerInRadiusUnique.length -\n            playerTreesValiueInRadius / playerInRadiusUnique.length;\n        //console.log(priceForLock);\n        return priceForLock;\n    } else {\n        console.log(\"Cet arbre ne vous appartient pas\");\n    }\n}\n\n// Chaque fois qu'il le souhaite, un joueur peut verrouiller un arbre en payant la formule suivante: [valeur de l'arbre] × 10 + ([valeur de tous les arbres dans un rayon de 100 m] × [nombre de joueurs dans un rayon de 100 m]) - ([valeur de tous les arbres des joueurs dans un rayon de 100 m] / [nombre de joueurs dans un rayon de 100 m]). Un arbre verrouillé ne peut pas être acheté par un autre joueur.\n\nmodule.exports = lockFreeTreeAlgo;\n"],"file":"lockfreetree.js"}