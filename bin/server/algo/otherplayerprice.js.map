{"version":3,"sources":["../../../src/server/algo/otherplayerprice.js"],"names":["db","require","doc","Trees","insideCircle","otherPlayerPrice","treeInfo","playerInfo","allTrees","find","treeGeoloc","geoloc","treesInRadius","center","lat","lon","radius","otherPlayerTree","myTreeInCercle","otherPlayerTreeValiue","treeLeave","leave","otherPlayerTreeValiueUtile","myTreeInCercleValiue","forEach","element","inCercleRadius","push","player_id","_id","treePrice","length","module","exports"],"mappings":"AAAA,MAAMA,EAAE,GAAGC,OAAO,CAAC,gBAAD,CAAlB;;AACA,MAAM;AAACC,EAAAA;AAAD,IAAQD,OAAO,CAAC,UAAD,CAArB;;AACA,MAAME,KAAK,GAAGH,EAAE,CAACG,KAAjB;AACA,SAAQC,YAAR,QAA2B,mBAA3B;;AAEA,eAAeC,gBAAf,CAAgCC,QAAhC,EAA0CC,UAA1C,EAAsD;AAClD;AAEA,QAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAN,EAAvB;AACA,QAAMC,UAAU,GAAGJ,QAAQ,CAACK,MAA5B;AACA,QAAMC,aAAa,GAAG,EAAtB;AACA,QAAMC,MAAM,GAAG;AAACC,IAAAA,GAAG,EAAEJ,UAAU,CAACI,GAAjB;AAAsBC,IAAAA,GAAG,EAAEL,UAAU,CAACK;AAAtC,GAAf;AACA,QAAMC,MAAM,GAAG,GAAf;AACA,QAAMC,eAAe,GAAG,EAAxB;AACA,QAAMC,cAAc,GAAG,EAAvB;AAEA,MAAIC,qBAAqB,GAAG,CAA5B,CAXkD,CAalD;AAEA;;AACA,QAAMC,SAAS,GAAGd,QAAQ,CAACe,KAA3B,CAhBkD,CAkBlD;AAEA;AAEA;;AACA,MAAIC,0BAA0B,GAAGH,qBAAqB,GAAGb,QAAQ,CAACe,KAAlE,CAvBkD,CAwBlD;;AACA,MAAIE,oBAAoB,GAAG,CAA3B;AAEAf,EAAAA,QAAQ,CAACgB,OAAT,CAAkBC,OAAD,IAAa;AAC1B,UAAMC,cAAc,GAAGtB,YAAY,CAC/B;AAACU,MAAAA,GAAG,EAAEW,OAAO,CAACd,MAAR,CAAeG,GAArB;AAA0BC,MAAAA,GAAG,EAAEU,OAAO,CAACd,MAAR,CAAeI;AAA9C,KAD+B,EAE/BF,MAF+B,EAG/BG,MAH+B,CAAnC;;AAMA,QAAIU,cAAc,KAAK,IAAvB,EAA6B;AACzBd,MAAAA,aAAa,CAACe,IAAd,CAAmBF,OAAnB;;AACA,UAAIA,OAAO,CAACG,SAAR,IAAqBtB,QAAQ,CAACsB,SAAlC,EAA6C;AACzCX,QAAAA,eAAe,CAACU,IAAhB,CAAqBF,OAArB;AACAN,QAAAA,qBAAqB,IAAIM,OAAO,CAACJ,KAAjC;AACH,OAHD,MAGO,IAAII,OAAO,CAACG,SAAR,IAAqBrB,UAAU,CAACsB,GAApC,EAAyC;AAC5CX,QAAAA,cAAc,CAACS,IAAf,CAAoBF,OAApB;AACH;AACJ;AACJ,GAhBD;AAkBAP,EAAAA,cAAc,CAACM,OAAf,CAAwBC,OAAD,IAAa;AAChCF,IAAAA,oBAAoB,IAAIE,OAAO,CAACJ,KAAhC;AACH,GAFD;;AAIA,MAAIC,0BAA0B,GAAG,CAAjC,EAAoC;AAChCA,IAAAA,0BAA0B,GAAG,CAA7B;AACH;;AAED,QAAMQ,SAAS,GACXV,SAAS,GACRE,0BAA0B,GAAGV,aAAa,CAACmB,MAA5C,GACId,eAAe,CAACc,MAFpB,GAGAT,0BAHA,GAIAC,oBALJ;AAOA,SAAOO,SAAP;AACH;;AAEDE,MAAM,CAACC,OAAP,GAAiB5B,gBAAjB,C,CAEA;AAEA;AAEA","sourcesContent":["const db = require(\"../_helpers/db\");\nconst {doc} = require(\"prettier\");\nconst Trees = db.Trees;\nimport {insideCircle} from \"geolocation-utils\";\n\nasync function otherPlayerPrice(treeInfo, playerInfo) {\n    // ----- geoloc -----\n\n    const allTrees = await Trees.find();\n    const treeGeoloc = treeInfo.geoloc;\n    const treesInRadius = [];\n    const center = {lat: treeGeoloc.lat, lon: treeGeoloc.lon};\n    const radius = 100;\n    const otherPlayerTree = [];\n    const myTreeInCercle = [];\n\n    let otherPlayerTreeValiue = 0;\n\n    // ----- donnée de calcule de l'algo -----\n\n    // valeur de l'arbre ciblé\n    const treeLeave = treeInfo.leave;\n\n    // nombre d'arbres dans un rayon de 100 m : treesInRadius.length\n\n    // quantité d'arbre du joueur ciblé dans un rayon de 100m : otherPlayerTree.length\n\n    // valeur de tous les autres arbres du joueur dans un rayon de 100m\n    let otherPlayerTreeValiueUtile = otherPlayerTreeValiue - treeInfo.leave;\n    // valeur de tout votre arbre dans un rayon de 100m\n    let myTreeInCercleValiue = 0;\n\n    allTrees.forEach((element) => {\n        const inCercleRadius = insideCircle(\n            {lat: element.geoloc.lat, lon: element.geoloc.lon},\n            center,\n            radius,\n        );\n\n        if (inCercleRadius === true) {\n            treesInRadius.push(element);\n            if (element.player_id == treeInfo.player_id) {\n                otherPlayerTree.push(element);\n                otherPlayerTreeValiue += element.leave;\n            } else if (element.player_id == playerInfo._id) {\n                myTreeInCercle.push(element);\n            }\n        }\n    });\n\n    myTreeInCercle.forEach((element) => {\n        myTreeInCercleValiue += element.leave;\n    });\n\n    if (otherPlayerTreeValiueUtile < 0) {\n        otherPlayerTreeValiueUtile = 0;\n    }\n\n    const treePrice =\n        treeLeave +\n        (otherPlayerTreeValiueUtile * treesInRadius.length) /\n            otherPlayerTree.length +\n        otherPlayerTreeValiueUtile -\n        myTreeInCercleValiue;\n\n    return treePrice;\n}\n\nmodule.exports = otherPlayerPrice;\n\n// https://crack-hall-trees.herokuapp.com/trees/buyotherplayertree/5ece7015b467be4c63b04e4a/99\n\n// Si l'arbre appartient à un autre joueur, le prix est calculé avec la formule suivante: [valeur de l'arbre ciblé] + ([valeur de tous les arbres du joueur ciblé dans un rayon de 100 m] × ([nombre d'arbres dans un rayon de 100 m] / [ quantité d'arbre du joueur ciblé dans un rayon de 100m])) + [valeur de tous les autres arbres du joueur dans un rayon de 100m] - [valeur de tout votre arbre dans un rayon de 100m].\n\n// If the tree belongs to another player, the price is computed with the following formula: [value of the targetted tree] + ([value of all the targetted player's trees in 100m radius] × ([amount of trees in 100m radius] / [amount of tree of targetted player in 100m radius])) + [value of all the other players trees in 100m radius] - [value of all your tree in 100m radius].\n"],"file":"otherplayerprice.js"}